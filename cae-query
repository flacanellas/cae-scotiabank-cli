#!/usr/bin/python3.8
# -*- coding: utf-8 -*-

"""
Author: Francisca Cañellas
Date: 08-04-2022
Email: francisca.leonor.alejandra.c@gmail.com
Description: CAE util for query info about current quotes!
"""

from argparse import ArgumentParser
from math import ceil
from pstats import Stats
from requests import post, exceptions
from shutil import get_terminal_size
from sys import argv
from re import match
from json import dumps

class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class DNIError(Exception):
    def __init__(self, message):
        self.__message = message

    def __str__(self):
        return f"{Colors.FAIL}{self.__message}{Colors.ENDC}"

class DNI:
    def __init__(self, dni):
        self.__dni = dni
        self.__cleanFormat()
        
        if not self.__isValidFormat():
            raise DNIError('[ERROR] ¡Formato inválido del RUT \'X[X].XXX.XXX-X\'!')
        if not self.__check():
            raise DNIError('[ERROR] ¡RUT inválido!')

    def __str__(self):
        return str(self.__dni)

    def __cleanFormat(self):
        self.__dni = self.__dni.replace('.', '') \
            .replace('-', '')

    def __isValidFormat(self):
        dni = self.__dni.lower()
        return len(dni) >= 8 and len(dni) <= 9  \
            and match(r'(?P<dni>[0-9k]{8,9}){1}', dni).group('dni') == dni

    def __check(self):
        vd = 'k' if self.__dni[-1].lower() == 'k' else int(self.__dni[-1].lower());
        m, s = (2, 0)
        for d in self.__dni.lower()[::-1][1:]:
            s += (int(d) * m)
            m = m + 1 if m < 7 else 2
        cvd = 11 - (s % 11)
        if cvd >= 0 and cvd <= 9:
            return vd == cvd
        elif cvd == 10:
            return vd == 'k'
        elif cvd == 1:
            return vd == 0

    def getDNI(self):
        return self.__dni

    def getFormated(self):
        dv = self.__dni[-1]
        if len(self.__dni) == 8:
            p1 = self.__dni[0]
            p2 = self.__dni[1:4]
            p3 = self.__dni[4:7]
        else:
            p1 = self.__dni[0:2]
            p2 = self.__dni[2:5]
            p3 = self.__dni[5:8]

        return '%s.%s.%s-%s' % (p1, p2, p3, dv)

class CAE:
    def __init__(self, dni):
        self.__dni = dni
        self.__hideCuoteDetails = False
        self.__hideCreditDebtor = False
    
    def __printResponse(self, data):
        if 'code' in data and data['code'] == 1:
            exit(f"[INFO] {Colors.WARNING}{data['message']}...{Colors.ENDC}")

        if data['message'] == 'SUCCESS':
            r = data['result']
            dniFormated = DNI(r['rutCliente']).getFormated()
            clientName = r['nombreCliente'].split(' ')
            clientName = ' '.join(clientName[2:]) + ' ' + ' '.join(clientName[0:2])

            br = '{C}%s{/}\n' % ('-' * 50)
            br2 = '{W}%s{/}\n' % ('=' * 50)

            toPrint = '{TC}RUT Consultado: {/}{W}%s{/}\n' % dniFormated
            
            if not self.__hideCreditDebtor:
                toPrint += '\n{TC}Información del Cliente{/}\n' \
                    + br \
                    + '{C}Nombre: {/}%s\n' % clientName \
                    + '{C}Email: {/}%s\n' % r['email'] \
                    + br

            if len(r['cuotas']) > 0:
                toPrint += '\n{TC}Cuotas del crédito{/}\n\n'

                for c in r['cuotas']:
                    toPrint += '{W}Cuota: #%s{/}\n%s' % (c['nroCuota'], br2) \
                        + '{TC}Resúmen:{/}\n' \
                        + br \
                        + '{C}Total: {/}$%s\n' % int(ceil(c['totalCuota'])) \
                        + '{C}Fecha de vencimiento: {/}%s\n' % c['fechaVencimiento'] \
                        + '{C}Morosidad: {/}%s\n' % ('Sí' if c['moroso'] else 'No') \
                    
                    if not self.__hideCuoteDetails:    
                        toPrint += '\n{TC}Detalle:{/}\n' \
                            + br \
                            + '{C}Cuenta: {/}%s\n' % c['nroCuenta'] \
                            + '{C}Tipo: {/}%s\n' % c['item'] \
                            + '{C}Año Licitación: {/}%s\n' % c['anioLicitacion'] \
                            + '{C}Monto por Mora: {/}$%s\n' % int(ceil(c['mora'])) \
                            + '{C}Monto Principal: {/}$%s\n' % int(ceil(c['montoPrincipal'])) \
                            + '{C}Interés: {/}$%s\n' % int(ceil(c['interes'])) \
                            + '{C}Reajuste: {/}$%s\n' % int(ceil(c['reajuste'])) \
                            + '{C}Deducciones: {/}$%s\n' % int(ceil(c['deducciones']))
                            
                    toPrint += br2
            toPrint = toPrint.replace('{TC}', Colors.BOLD + Colors.OKCYAN) \
                .replace('{W}', Colors.WARNING) \
                .replace('{C}', Colors.OKCYAN) \
                .replace('{/}', Colors.ENDC)
            print(toPrint)
            
    def hideCuoteDetails(self, status=False):
        self.__hideCuoteDetails = status
        
    def hideCreditDebtor(self, status=False):
        self.__hideCreditDebtor = status

    def query(self):
        payload = dumps({ \
            'rut': self.__dni, \
            'codTipoCredito': 'CAE' \
            } \
        )
        url = 'https://appservtrx.scotiabank.cl/botonpago/credito/getCuotas'
        headers = {'Content-Type': 'application/json'}
        r = post(url, data=payload, headers=headers)
        
        if r.status_code == 200:
            self.__printResponse(r.json())
        else:
            while True:
                r = input('[ERROR] ¡No pude obtener la información! ¿reintentar? [s/n]: ')
                if not 's' in r and not 'n' in r:
                    print('[ERROR] ¡Respuesta errónea!\n')
                    continue
                elif r == 's':
                    self.query()
                else:
                    raise KeyboardInterrupt


def run():
    # NARROW SCREEN: LOCKED
    ####################################################################################
    screenLocked = False
    while get_terminal_size().columns < 60:
        if not screenLocked:
            print( \
                f"{Colors.FAIL}[ERROR] ¡La consola es muy estrecha!{Colors.ENDC}\n" \
                + f"{Colors.OKCYAN}Debes agrandarla...{Colors.ENDC}" \
                , end=''
            )
        screenLocked = True

    if screenLocked:
        print(f"{Colors.OKCYAN}[OK]{Colors.ENDC}\n")
    ####################################################################################
    
    # CLI PARAMETERS
    ####################################################################################
    ap = ArgumentParser(
        add_help = False,
        description = 'CAE Query - Obtiene los detalles de la cuota/s CAE - Scotiabank'
    )
    ap.version = '0.0.1'
    ap.add_argument('-v', action='version', help='Muestra la versión del script.')
    ap.add_argument('-h', action='store_true', dest='showHelp', \
        help='Muestra éste mensaje de ayuda para el usuario.'
    )
    ap.add_argument('-o', action='store', dest='hide', \
        help='Permite ocultar partes de la salida. (Por defecto se muestra todo)' \
            + '\ncd: Oculta el detalle de la/s cuotas.' \
            + '\ndd: Oculta la información del deudor.' \
            + 'Ejemplo: -o QDCD'
    )
    ap.add_argument('-r', action='store', dest='dni', \
        help='Recibe el RUT del cliente a consultar.'
    )
    args = ap.parse_args()

    if len(argv) == 1 or args.showHelp:
        ap.print_help()
        exit()
    ####################################################################################
    
    try:
        cae = CAE(DNI(args.dni).getDNI())
        cae.hideCuoteDetails('cd' in args.hide if args.hide != None else False)
        cae.hideCreditDebtor('dd' in args.hide if args.hide != None else False)
        cae.query()

    except DNIError as e:
        print(e, "\n")
        argv[argv.index('-r') + 1] = input('RUT: ')
        run()
    except exceptions.ConnectionError as e:
        print("[ERROR] ¡No me pude conectar al servidor!")

if __name__ == '__main__':
    try:
        run()
    except KeyboardInterrupt as e:
        print("\n\n...Abortado!")
